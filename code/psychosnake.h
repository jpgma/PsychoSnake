/* Caracteres p/ constru√ßao de obstaculos:

    176 ‚ñë
    177 ‚ñí
    178 ‚ñì
    219 ‚ñà
    220 ‚ñÑ
    223 ‚ñÄ
    254 ‚ñ†

    0x1F78D üûç
    0x251B  ‚îõ
    0x2503  ‚îÉ
    0x2517  ‚îó
    180 ‚î§
    193 ‚î¥
    195 ‚îú
    197 ‚îº
    191 ‚îê
    218 ‚îå
    194 ‚î¨
    196 ‚îÄ

    250 ¬∑
    188 ‚ïù
    186 ‚ïë
    200 ‚ïö
    185 ‚ï£
    202 ‚ï©
    204 ‚ï†
    206 ‚ï¨
    187 ‚ïó
    201 ‚ïî
    203 ‚ï¶
    205 ‚ïê

    exemplos:
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶
    ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïó  
    ‚ïö‚ïê‚ïê‚ïê‚ïù 
*/

#define WALL_CENTER             0
#define WALL_UP_LEFT            1
#define WALL_UP_DOWN            2
#define WALL_UP_RIGHT           3
#define WALL_UP_DOWN_LEFT       4
#define WALL_UP_LEFT_RIGHT      5
#define WALL_UP_DOWN_RIGHT      6
#define WALL_UP_DOWN_LEFT_RIGHT 7
#define WALL_DOWN_LEFT          8
#define WALL_DOWN_RIGHT         9
#define WALL_DOWN_LEFT_RIGHT    10
#define WALL_LEFT_RIGHT         11

global u32 thin_walls[] = 
{
    250, 0x2518, 179, 192, 180, 193, 
    195, 197, 191, 218, 194, 196
};

global u32 weird_walls[] = 
{
    'a', 'b', 'c', 'd', 'e', 'f', 
    'l', 'k', 'j', 'i', 'h', 'g',
};

global u32 wall_map[] = 
{
    0b11111111111111101111111111111111,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b00000000000000000000000000000000,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b10000000000000000000000000000001,
    0b11111111111111101111111111111111,
};

global u32 food_map[] = 
{
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000001000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
};

#define MAX_SNAKE_LENGTH 100
struct GameState
{
    b32 initialized;

    r32 posicao_x[MAX_SNAKE_LENGTH];
    r32 posicao_y[MAX_SNAKE_LENGTH];
    s32 dead_count;
    r32 velocidade_x;
    r32 velocidade_y;
    s32 gomos=0;
};

internal void GameUpdateAndRender (GameState *game_state, Renderer *renderer, r32 dt);